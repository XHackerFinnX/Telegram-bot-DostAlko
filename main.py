from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiohttp.client_exceptions import ClientOSError, ClientConnectorError
from asyncio.exceptions import TimeoutError
from aiogram.utils.exceptions import MessageToDeleteNotFound, MessageCantBeDeleted, TelegramAPIError, NetworkError, RetryAfter
from config.config import TOKEN, admin
from data.data_users import sql_start_users, sql_users_check, sql_delete_users
from data.data_courier import sql_check_couriers
from data.data_courier import sql_start_courier, sql_start_storage_couriers, sql_id_courier, sql_delete_courier, sql_broadcast_data_couriers
from data.data_courier_change import sql_start_courier_change, write_courier_change_open, write_courier_change_close
from display.courier_registration import start_registration
from display.display_courier import work_courier_info
from keybord_markup.keybord import change_open, change_close
import asyncio

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
print("DostAlko–°ourier –±–æ—Ç")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

@dp.message_handler(commands=["start", "update"])
async def start(message: types.Message):
    
    id_users = message.chat.id
    
    if message.chat.id in admin:
        
        await message.answer(text= "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
        
    else:
        
        await message.answer(text= "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DostAlko–°ourier.")
        
        if await sql_users_check(id_users):
            
            await start_registration(dp, message)
            
        else:
            await bot.send_message(chat_id= id_users, text= '–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É"!\n–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã, —á—Ç–æ–±—ã –≤–∞–º –∏ –Ω–∞–º –±—ã–ª–æ —É–¥–æ–±–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç–µ!', reply_markup= await change_open())
            await work_courier_info(id_users)


@dp.message_handler(text=["–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É"])
async def open_close_change(message: types.Message):
    
    if await sql_check_couriers(message.chat.id):
        
        if await write_courier_change_open(message.chat.id):
            
            await message.answer(text= "–°–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞! –£–¥–∞—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã üëç", reply_markup= await change_close())
            
        else:
        
            await message.answer(text= "–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ! –£ –≤–∞—Å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ —Å–º–µ–Ω–∞.")
            print("–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ! –û—Ç–∫—Ä—ã—Ç–∞—è —Å–º–µ–Ω–∞.")
        
    else:
        
        await message.answer(text= "–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!")
        print("–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!")
        
        
@dp.message_handler(text=["–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É"])
async def open_close_change(message: types.Message):
    
    if await sql_check_couriers(message.chat.id):
        
        if await write_courier_change_close(message.chat.id):
            
            await message.answer(text= "–°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞!", reply_markup= await change_open())
            
        else:
        
            await message.answer(text= "–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ! –£ –≤–∞—Å —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ —Å–º–µ–Ω–∞.")
            print("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ! –ó–∞–∫—Ä—ã—Ç–∞ —Å–º–µ–Ω–∞.")
        
    else:
        
        await message.answer(text= "–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!")
        print("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!")


@dp.callback_query_handler()
async def all_callback(callback: types.CallbackQuery):

    id_user = await sql_id_courier()
    # –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –≤ –∫—É—Ä—å–µ—Ä—ã
    try:
        
        for user in id_user:
            if callback.data == f"YES_{str(user[0])}":

                await bot.send_message(chat_id=user[0], text= "–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!")

                await sql_broadcast_data_couriers(user[0])
                await sql_delete_courier(user[0])
                
                await bot.send_message(chat_id= user[0], text= '–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É"!\n–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã, —á—Ç–æ–±—ã –≤–∞–º –∏ –Ω–∞–º –±—ã–ª–æ —É–¥–æ–±–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç–µ!', reply_markup= await change_open())
                await work_courier_info(user[0])

            elif callback.data == f"NO_{str(user[0])}":

                await bot.send_message(chat_id=user[0], text= "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")

                await sql_delete_courier(user[0])
                await sql_delete_users(user[0])
    
    except:
        print("–û—à–∏–±–∫–∞ —Å –¥–æ–ª–≥–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏!")
    
    # –ó–∞–ø—Ä–æ—Å—ã callback –∫—É—Ä—å–µ—Ä–æ–≤ –≤ –∏—Ö –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
    
    try:
        if callback.data == f"UPDATE_{callback.from_user.id}":
            await work_courier_info(callback.from_user.id)
        
    except:
        pass

async def main():
    
    await sql_start_users()
    await sql_start_courier()
    await sql_start_storage_couriers()
    await sql_start_courier_change()
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())